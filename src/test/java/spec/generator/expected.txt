Production(counter=1, name=c-printable, args=[], expression=[<[\t][CHARACTER TABULATION][0x9]> ||
   <[\n][LINE FEED (LF)][0xa]> ||
   <[\r][CARRIAGE RETURN (CR)][0xd]> ||
   [<[ ][SPACE][0x20]>-<[~][TILDE][0x7e]>] ||
   <[\u0085][NEXT LINE (NEL)][0x85]> ||
   [<[ ][NO-BREAK SPACE][0xa0]>-<[퟿][?][0xd7ff]>] ||
   [<[][PRIVATE USE AREA E000][0xe000]>-<[�][REPLACEMENT CHARACTER][0xfffd]>] ||
   [<[\uD800\uDC00][LINEAR B SYLLABLE B008 A][0x10000]>-<[\uDBFF\uDFFF][?][0x10ffff]>]])

Production(counter=2, name=nb-json, args=[], expression=[<[\t][CHARACTER TABULATION][0x9]> ||
   [<[ ][SPACE][0x20]>-<[\uDBFF\uDFFF][?][0x10ffff]>]])

Production(counter=3, name=c-byte-order-mark, args=[], expression=<[\uFEFF][ZERO WIDTH NO-BREAK SPACE][0xfeff]>)

Production(counter=4, name=c-sequence-entry, args=[], expression=<[-][HYPHEN-MINUS][0x2d]>)

Production(counter=5, name=c-mapping-key, args=[], expression=<[?][QUESTION MARK][0x3f]>)

Production(counter=6, name=c-mapping-value, args=[], expression=<[:][COLON][0x3a]>)

Production(counter=7, name=c-collect-entry, args=[], expression=<[,][COMMA][0x2c]>)

Production(counter=8, name=c-sequence-start, args=[], expression=<[[][LEFT SQUARE BRACKET][0x5b]>)

Production(counter=9, name=c-sequence-end, args=[], expression=<[]][RIGHT SQUARE BRACKET][0x5d]>)

Production(counter=10, name=c-mapping-start, args=[], expression=<[{][LEFT CURLY BRACKET][0x7b]>)

Production(counter=11, name=c-mapping-end, args=[], expression=<[}][RIGHT CURLY BRACKET][0x7d]>)

Production(counter=12, name=c-comment, args=[], expression=<[#][NUMBER SIGN][0x23]>)

Production(counter=13, name=c-anchor, args=[], expression=<[&][AMPERSAND][0x26]>)

Production(counter=14, name=c-alias, args=[], expression=<[*][ASTERISK][0x2a]>)

Production(counter=15, name=c-tag, args=[], expression=<[!][EXCLAMATION MARK][0x21]>)

Production(counter=16, name=c-literal, args=[], expression=<[|][VERTICAL LINE][0x7c]>)

Production(counter=17, name=c-folded, args=[], expression=<[>][GREATER-THAN SIGN][0x3e]>)

Production(counter=18, name=c-single-quote, args=[], expression=<[\'][APOSTROPHE][0x27]>)

Production(counter=19, name=c-double-quote, args=[], expression=<["][QUOTATION MARK][0x22]>)

Production(counter=20, name=c-directive, args=[], expression=<[%][PERCENT SIGN][0x25]>)

Production(counter=21, name=c-reserved, args=[], expression=[<[@][COMMERCIAL AT][0x40]> ||
   <[`][GRAVE ACCENT][0x60]>])

Production(counter=22, name=c-indicator, args=[], expression=[->c-sequence-entry ||
   ->c-mapping-key ||
   ->c-mapping-value ||
   ->c-collect-entry ||
   ->c-sequence-start ||
   ->c-sequence-end ||
   ->c-mapping-start ||
   ->c-mapping-end ||
   ->c-comment ||
   ->c-anchor ||
   ->c-alias ||
   ->c-tag ||
   ->c-literal ||
   ->c-folded ||
   ->c-single-quote ||
   ->c-double-quote ||
   ->c-directive ||
   ->c-reserved])

Production(counter=23, name=c-flow-indicator, args=[], expression=[->c-collect-entry ||
   ->c-sequence-start ||
   ->c-sequence-end ||
   ->c-mapping-start ||
   ->c-mapping-end])

Production(counter=24, name=b-line-feed, args=[], expression=<[\n][LINE FEED (LF)][0xa]>)

Production(counter=25, name=b-carriage-return, args=[], expression=<[\r][CARRIAGE RETURN (CR)][0xd]>)

Production(counter=26, name=b-char, args=[], expression=[->b-line-feed ||
   ->b-carriage-return])

Production(counter=27, name=nb-char, args=[], expression=->c-printable - ->b-char - ->c-byte-order-mark)

Production(counter=28, name=b-break, args=[], expression=[->b-carriage-return + ->b-line-feed ||
   ->b-carriage-return ||
   ->b-line-feed])

Production(counter=29, name=b-as-line-feed, args=[], expression=->b-break)

Production(counter=30, name=b-non-content, args=[], expression=->b-break)

Production(counter=31, name=s-space, args=[], expression=<[ ][SPACE][0x20]>)

Production(counter=32, name=s-tab, args=[], expression=<[\t][CHARACTER TABULATION][0x9]>)

Production(counter=33, name=s-white, args=[], expression=[->s-space ||
   ->s-tab])

Production(counter=34, name=ns-char, args=[], expression=->nb-char - ->s-white)

Production(counter=35, name=ns-dec-digit, args=[], expression=[<[0][DIGIT ZERO][0x30]>-<[9][DIGIT NINE][0x39]>])

Production(counter=36, name=ns-hex-digit, args=[], expression=[->ns-dec-digit ||
   [<[A][LATIN CAPITAL LETTER A][0x41]>-<[F][LATIN CAPITAL LETTER F][0x46]>] ||
   [<[a][LATIN SMALL LETTER A][0x61]>-<[f][LATIN SMALL LETTER F][0x66]>]])

Production(counter=37, name=ns-ascii-letter, args=[], expression=[[<[A][LATIN CAPITAL LETTER A][0x41]>-<[Z][LATIN CAPITAL LETTER Z][0x5a]>] ||
   [<[a][LATIN SMALL LETTER A][0x61]>-<[z][LATIN SMALL LETTER Z][0x7a]>]])

Production(counter=38, name=ns-word-char, args=[], expression=[->ns-dec-digit ||
   ->ns-ascii-letter ||
   <[-][HYPHEN-MINUS][0x2d]>])

Production(counter=39, name=ns-uri-char, args=[], expression=<[%][PERCENT SIGN][0x25]> + ->ns-hex-digit + [->ns-hex-digit ||
   ->ns-word-char ||
   <[#][NUMBER SIGN][0x23]> ||
   <[;][SEMICOLON][0x3b]> ||
   <[/][SOLIDUS][0x2f]> ||
   <[?][QUESTION MARK][0x3f]> ||
   <[:][COLON][0x3a]> ||
   <[@][COMMERCIAL AT][0x40]> ||
   <[&][AMPERSAND][0x26]> ||
   <[=][EQUALS SIGN][0x3d]> ||
   <[+][PLUS SIGN][0x2b]> ||
   <[$][DOLLAR SIGN][0x24]> ||
   <[,][COMMA][0x2c]> ||
   <[_][LOW LINE][0x5f]> ||
   <[.][FULL STOP][0x2e]> ||
   <[!][EXCLAMATION MARK][0x21]> ||
   <[~][TILDE][0x7e]> ||
   <[*][ASTERISK][0x2a]> ||
   <[\'][APOSTROPHE][0x27]> ||
   <[(][LEFT PARENTHESIS][0x28]> ||
   <[)][RIGHT PARENTHESIS][0x29]> ||
   <[[][LEFT SQUARE BRACKET][0x5b]> ||
   <[]][RIGHT SQUARE BRACKET][0x5d]>])

Production(counter=40, name=ns-tag-char, args=[], expression=->ns-uri-char - ->c-tag - ->c-flow-indicator)

Production(counter=41, name=c-escape, args=[], expression=<[\\][REVERSE SOLIDUS][0x5c]>)

Production(counter=42, name=ns-esc-null, args=[], expression=<[0][DIGIT ZERO][0x30]>)

Production(counter=43, name=ns-esc-bell, args=[], expression=<[a][LATIN SMALL LETTER A][0x61]>)

Production(counter=44, name=ns-esc-backspace, args=[], expression=<[b][LATIN SMALL LETTER B][0x62]>)

Production(counter=45, name=ns-esc-horizontal-tab, args=[], expression=[<[t][LATIN SMALL LETTER T][0x74]> ||
   <[\t][CHARACTER TABULATION][0x9]>])

Production(counter=46, name=ns-esc-line-feed, args=[], expression=<[n][LATIN SMALL LETTER N][0x6e]>)

Production(counter=47, name=ns-esc-vertical-tab, args=[], expression=<[v][LATIN SMALL LETTER V][0x76]>)

Production(counter=48, name=ns-esc-form-feed, args=[], expression=<[f][LATIN SMALL LETTER F][0x66]>)

Production(counter=49, name=ns-esc-carriage-return, args=[], expression=<[r][LATIN SMALL LETTER R][0x72]>)

Production(counter=50, name=ns-esc-escape, args=[], expression=<[e][LATIN SMALL LETTER E][0x65]>)

Production(counter=51, name=ns-esc-space, args=[], expression=<[ ][SPACE][0x20]>)

Production(counter=52, name=ns-esc-double-quote, args=[], expression=->c-double-quote)

Production(counter=53, name=ns-esc-slash, args=[], expression=<[/][SOLIDUS][0x2f]>)

Production(counter=54, name=ns-esc-backslash, args=[], expression=->c-escape)

Production(counter=55, name=ns-esc-next-line, args=[], expression=<[N][LATIN CAPITAL LETTER N][0x4e]>)

Production(counter=56, name=ns-esc-non-breaking-space, args=[], expression=<[_][LOW LINE][0x5f]>)

Production(counter=57, name=ns-esc-line-separator, args=[], expression=<[L][LATIN CAPITAL LETTER L][0x4c]>)

Production(counter=58, name=ns-esc-paragraph-separator, args=[], expression=<[P][LATIN CAPITAL LETTER P][0x50]>)

Production(counter=59, name=ns-esc-8-bit, args=[], expression=<[x][LATIN SMALL LETTER X][0x78]> + (->ns-hex-digit × 2))

Production(counter=60, name=ns-esc-16-bit, args=[], expression=<[u][LATIN SMALL LETTER U][0x75]> + (->ns-hex-digit × 4))

Production(counter=61, name=ns-esc-32-bit, args=[], expression=<[U][LATIN CAPITAL LETTER U][0x55]> + (->ns-hex-digit × 8))

Production(counter=62, name=c-ns-esc-char, args=[], expression=->c-escape + [->ns-esc-null ||
   ->ns-esc-bell ||
   ->ns-esc-backspace ||
   ->ns-esc-horizontal-tab ||
   ->ns-esc-line-feed ||
   ->ns-esc-vertical-tab ||
   ->ns-esc-form-feed ||
   ->ns-esc-carriage-return ||
   ->ns-esc-escape ||
   ->ns-esc-space ||
   ->ns-esc-double-quote ||
   ->ns-esc-slash ||
   ->ns-esc-backslash ||
   ->ns-esc-next-line ||
   ->ns-esc-non-breaking-space ||
   ->ns-esc-line-separator ||
   ->ns-esc-paragraph-separator ||
   ->ns-esc-8-bit ||
   ->ns-esc-16-bit ||
   ->ns-esc-32-bit])

Production(counter=63, name=s-indent, args=[n], expression=(->s-space × n))

Production(counter=64, name=s-indent, args=[<n], expression=(->s-space × m /* Where m < n */))

Production(counter=65, name=s-indent, args=[≤n], expression=(->s-space × m /* Where m ≤ n */))

Production(counter=66, name=s-separate-in-line, args=[], expression=(->s-white × +))

Production(counter=67, name=s-line-prefix, args=[n, c], expression=<c = block-out> ⇒ <->s-block-line-prefix(n)>
  <c = block-in> ⇒ <->s-block-line-prefix(n)>
  <c = flow-out> ⇒ <->s-flow-line-prefix(n)>
  <c = flow-in> ⇒ <->s-flow-line-prefix(n)>)

Production(counter=68, name=s-block-line-prefix, args=[n], expression=->s-indent(n))

Production(counter=69, name=s-flow-line-prefix, args=[n], expression=->s-indent(n) + (->s-separate-in-line × ?))

Production(counter=70, name=l-empty, args=[n, c], expression=[->s-line-prefix(n,c) ||
   ->s-indent(n)] + ->b-as-line-feed)

Production(counter=71, name=b-l-trimmed, args=[n, c], expression=->b-non-content + (->l-empty(n,c) × +))

Production(counter=72, name=b-as-space, args=[], expression=->b-break)

Production(counter=73, name=b-l-folded, args=[n, c], expression=[->b-l-trimmed(n,c) ||
   ->b-as-space])

Production(counter=74, name=s-flow-folded, args=[n], expression=(->s-separate-in-line × ?) + ->b-l-folded(n,c) + ->s-flow-line-prefix(n))

Production(counter=75, name=c-nb-comment-text, args=[], expression=->c-comment + (->nb-char × *))

Production(counter=76, name=b-comment, args=[], expression=->b-non-content)

Production(counter=77, name=s-b-comment, args=[], expression=(->s-separate-in-line + (->c-nb-comment-text × ?) × ?) + ->b-comment)

Production(counter=78, name=l-comment, args=[], expression=->s-separate-in-line + (->c-nb-comment-text × ?) + ->b-comment)

Production(counter=79, name=s-l-comments, args=[], expression=->s-b-comment + (->l-comment × *))

Production(counter=80, name=s-separate, args=[n, c], expression=<c = block-out> ⇒ <->s-separate-lines(n)>
  <c = block-in> ⇒ <->s-separate-lines(n)>
  <c = flow-out> ⇒ <->s-separate-lines(n)>
  <c = flow-in> ⇒ <->s-separate-lines(n)>
  <c = block-key> ⇒ <->s-separate-in-line>
  <c = flow-key> ⇒ <->s-separate-in-line>)

Production(counter=81, name=s-separate-lines, args=[n], expression=[->s-l-comments + ->s-flow-line-prefix(n) ||
   ->s-separate-in-line])

Production(counter=82, name=l-directive, args=[], expression=->c-directive + [->ns-yaml-directive ||
   ->ns-tag-directive ||
   ->ns-reserved-directive] + ->s-l-comments)

Production(counter=83, name=ns-reserved-directive, args=[], expression=->ns-directive-name + (->s-separate-in-line + ->ns-directive-parameter × *))

Production(counter=84, name=ns-directive-name, args=[], expression=(->ns-char × +))

Production(counter=85, name=ns-directive-parameter, args=[], expression=(->ns-char × +))

Production(counter=86, name=ns-yaml-directive, args=[], expression=<[Y][LATIN CAPITAL LETTER Y][0x59]> + <[A][LATIN CAPITAL LETTER A][0x41]> + <[M][LATIN CAPITAL LETTER M][0x4d]> + <[L][LATIN CAPITAL LETTER L][0x4c]> + ->s-separate-in-line + ->ns-yaml-version)

Production(counter=87, name=ns-yaml-version, args=[], expression=(->ns-dec-digit × +) + <[.][FULL STOP][0x2e]> + (->ns-dec-digit × +))

Production(counter=88, name=ns-tag-directive, args=[], expression=<[T][LATIN CAPITAL LETTER T][0x54]> + <[A][LATIN CAPITAL LETTER A][0x41]> + <[G][LATIN CAPITAL LETTER G][0x47]> + ->s-separate-in-line + ->c-tag-handle + ->s-separate-in-line + ->ns-tag-prefix)

Production(counter=89, name=c-tag-handle, args=[], expression=[->c-named-tag-handle ||
   ->c-secondary-tag-handle ||
   ->c-primary-tag-handle])

Production(counter=90, name=c-primary-tag-handle, args=[], expression=->c-tag)

Production(counter=91, name=c-secondary-tag-handle, args=[], expression=->c-tag + ->c-tag)

Production(counter=92, name=c-named-tag-handle, args=[], expression=->c-tag + (->ns-word-char × +) + ->c-tag)

Production(counter=93, name=ns-tag-prefix, args=[], expression=[->c-ns-local-tag-prefix ||
   ->ns-global-tag-prefix])

Production(counter=94, name=c-ns-local-tag-prefix, args=[], expression=->c-tag + (->ns-uri-char × *))

Production(counter=95, name=ns-global-tag-prefix, args=[], expression=->ns-tag-char + (->ns-uri-char × *))

Production(counter=96, name=c-ns-properties, args=[n, c], expression=[->c-ns-tag-property + (->s-separate(n,c) + ->c-ns-anchor-property × ?) ||
   ->c-ns-anchor-property + (->s-separate(n,c) + ->c-ns-tag-property × ?)])

Production(counter=97, name=c-ns-tag-property, args=[], expression=[->c-verbatim-tag ||
   ->c-ns-shorthand-tag ||
   ->c-non-specific-tag])

Production(counter=98, name=c-verbatim-tag, args=[], expression=->c-tag + <[<][LESS-THAN SIGN][0x3c]> + (->ns-uri-char × +) + <[>][GREATER-THAN SIGN][0x3e]>)

Production(counter=99, name=c-ns-shorthand-tag, args=[], expression=->c-tag-handle + (->ns-tag-char × +))

Production(counter=100, name=c-non-specific-tag, args=[], expression=->c-tag)

Production(counter=101, name=c-ns-anchor-property, args=[], expression=->c-anchor + ->ns-anchor-name)

Production(counter=102, name=ns-anchor-char, args=[], expression=->ns-char - ->c-flow-indicator)

Production(counter=103, name=ns-anchor-name, args=[], expression=(->ns-anchor-char × +))

Production(counter=104, name=c-ns-alias-node, args=[], expression=->c-alias + ->ns-anchor-name)

Production(counter=105, name=e-scalar, args=[], expression=<empty>)

Production(counter=106, name=e-node, args=[], expression=->e-scalar)

Production(counter=107, name=nb-double-char, args=[], expression=[->c-ns-esc-char ||
   ->nb-json - ->c-escape - ->c-double-quote])

Production(counter=108, name=ns-double-char, args=[], expression=->nb-double-char - ->s-white)

Production(counter=109, name=c-double-quoted, args=[n, c], expression=->c-double-quote + ->nb-double-text(n,c) + ->c-double-quote)

Production(counter=110, name=nb-double-text, args=[n, c], expression=<c = flow-out> ⇒ <->nb-double-multi-line(n)>
  <c = flow-in> ⇒ <->nb-double-multi-line(n)>
  <c = block-key> ⇒ <->nb-double-one-line>
  <c = flow-key> ⇒ <->nb-double-one-line>)

Production(counter=111, name=nb-double-one-line, args=[], expression=(->nb-double-char × *))

Production(counter=112, name=s-double-escaped, args=[n], expression=(->s-white × *) + ->c-escape + ->b-non-content + (->l-empty(n,c) × *) + ->s-flow-line-prefix(n))

Production(counter=113, name=s-double-break, args=[n], expression=[->s-double-escaped(n) ||
   ->s-flow-folded(n)])

Production(counter=114, name=nb-ns-double-in-line, args=[], expression=((->s-white × *) + ->ns-double-char × *))

Production(counter=115, name=s-double-next-line, args=[n], expression=->s-double-break(n) + (->ns-double-char + ->nb-ns-double-in-line + [->s-double-next-line(n) ||
   (->s-white × *)] × ?))

Production(counter=116, name=nb-double-multi-line, args=[n], expression=->nb-ns-double-in-line + [->s-double-next-line(n) ||
   (->s-white × *)])

Production(counter=117, name=c-quoted-quote, args=[], expression=->c-single-quote + ->c-single-quote)

Production(counter=118, name=nb-single-char, args=[], expression=[->c-quoted-quote ||
   ->nb-json - ->c-single-quote])

Production(counter=119, name=ns-single-char, args=[], expression=->nb-single-char - ->s-white)

Production(counter=120, name=c-single-quoted, args=[n, c], expression=->c-single-quote + ->nb-single-text(n,c) + ->c-single-quote)

Production(counter=121, name=nb-single-text, args=[n, c], expression=<c = flow-out> ⇒ <->nb-single-multi-line(n)>
  <c = flow-in> ⇒ <->nb-single-multi-line(n)>
  <c = block-key> ⇒ <->nb-single-one-line>
  <c = flow-key> ⇒ <->nb-single-one-line>)

Production(counter=122, name=nb-single-one-line, args=[], expression=(->nb-single-char × *))

Production(counter=123, name=nb-ns-single-in-line, args=[], expression=((->s-white × *) + ->ns-single-char × *))

Production(counter=124, name=s-single-next-line, args=[n], expression=->s-flow-folded(n) + (->ns-single-char + ->nb-ns-single-in-line + [->s-single-next-line(n) ||
   (->s-white × *)] × ?))

Production(counter=125, name=nb-single-multi-line, args=[n], expression=->nb-ns-single-in-line + [->s-single-next-line(n) ||
   (->s-white × *)])

Production(counter=126, name=ns-plain-first, args=[c], expression=[->ns-char - ->c-indicator ||
   ->c-mapping-key ||
   ->c-mapping-value ||
   ->c-sequence-entry])

Production(counter=127, name=ns-plain-safe, args=[c], expression=<c = flow-out> ⇒ <->ns-plain-safe-out>
  <c = flow-in> ⇒ <->ns-plain-safe-in>
  <c = block-key> ⇒ <->ns-plain-safe-out>
  <c = flow-key> ⇒ <->ns-plain-safe-in>)

Production(counter=128, name=ns-plain-safe-out, args=[], expression=->ns-char)

Production(counter=129, name=ns-plain-safe-in, args=[], expression=->ns-char - ->c-flow-indicator)

Production(counter=130, name=ns-plain-char, args=[c], expression=->ns-plain-safe(c) - [->c-mapping-value - ->c-comment ||
   ->c-comment ||
   ->c-mapping-value])

Production(counter=131, name=ns-plain, args=[n, c], expression=<c = flow-out> ⇒ <->ns-plain-multi-line(n,c)>
  <c = flow-in> ⇒ <->ns-plain-multi-line(n,c)>
  <c = block-key> ⇒ <->ns-plain-one-line(c)>
  <c = flow-key> ⇒ <->ns-plain-one-line(c)>)

Production(counter=132, name=nb-ns-plain-in-line, args=[c], expression=((->s-white × *) + ->ns-plain-char(c) × *))

Production(counter=133, name=ns-plain-one-line, args=[c], expression=->ns-plain-first(c) + ->nb-ns-plain-in-line(c))

Production(counter=134, name=s-ns-plain-next-line, args=[n, c], expression=->s-flow-folded(n) + ->ns-plain-char(c) + ->nb-ns-plain-in-line(c))

Production(counter=135, name=ns-plain-multi-line, args=[n, c], expression=->ns-plain-one-line(c) + (->s-ns-plain-next-line(n,c) × *))

Production(counter=136, name=in-flow, args=[c], expression=<c = flow-out> ⇒ <flow-in>
  <c = flow-in> ⇒ <flow-in>
  <c = block-key> ⇒ <flow-key>
  <c = flow-key> ⇒ <flow-key>)

Production(counter=137, name=c-flow-sequence, args=[n, c], expression=->c-sequence-start + (->s-separate(n,c) × ?) + ->ns-s-flow-seq-entries(n,c) + ->in-flow(c) + (->ns-s-flow-seq-entries(n,c) × ?) + ->c-sequence-end)

Production(counter=138, name=ns-s-flow-seq-entries, args=[n, c], expression=->ns-flow-seq-entry(n,c) + (->s-separate(n,c) × ?) + (->c-collect-entry + (->s-separate(n,c) × ?) + (->ns-s-flow-seq-entries(n,c) × ?) × ?))

Production(counter=139, name=ns-flow-seq-entry, args=[n, c], expression=[->ns-flow-pair(n,c) ||
   ->ns-flow-node(n,c)])

Production(counter=140, name=c-flow-mapping, args=[n, c], expression=->c-mapping-start + (->s-separate(n,c) × ?) + ->ns-s-flow-map-entries(n,c) + ->in-flow(c) + (->ns-s-flow-map-entries(n,c) × ?) + ->c-mapping-end)

Production(counter=141, name=ns-s-flow-map-entries, args=[n, c], expression=->ns-flow-map-entry(n,c) + (->s-separate(n,c) × ?) + (->c-collect-entry + (->s-separate(n,c) × ?) + (->ns-s-flow-map-entries(n,c) × ?) × ?))

Production(counter=142, name=ns-flow-map-entry, args=[n, c], expression=[->c-mapping-key + ->s-separate(n,c) + ->ns-flow-map-explicit-entry(n,c) ||
   ->ns-flow-map-implicit-entry(n,c)])

Production(counter=143, name=ns-flow-map-explicit-entry, args=[n, c], expression=[->ns-flow-map-implicit-entry(n,c) ||
   ->e-node + ->e-node])

Production(counter=144, name=ns-flow-map-implicit-entry, args=[n, c], expression=[->ns-flow-map-yaml-key-entry(n,c) ||
   ->c-ns-flow-map-empty-key-entry(n,c) ||
   ->c-ns-flow-map-json-key-entry(n,c)])

Production(counter=145, name=ns-flow-map-yaml-key-entry, args=[n, c], expression=->ns-flow-yaml-node(n,c) + [(->s-separate(n,c) × ?) + ->c-ns-flow-map-separate-value(n,c) ||
   ->e-node])

Production(counter=146, name=c-ns-flow-map-empty-key-entry, args=[n, c], expression=->e-node + ->c-ns-flow-map-separate-value(n,c))

Production(counter=147, name=c-ns-flow-map-separate-value, args=[n, c], expression=->c-mapping-value + [->s-separate(n,c) + ->ns-flow-node(n,c) ||
   ->e-node])

Production(counter=148, name=c-ns-flow-map-json-key-entry, args=[n, c], expression=->c-flow-json-node(n,c) + [(->s-separate(n,c) × ?) + ->c-ns-flow-map-adjacent-value(n,c) ||
   ->e-node])

Production(counter=149, name=c-ns-flow-map-adjacent-value, args=[n, c], expression=->c-mapping-value + [(->s-separate(n,c) × ?) + ->ns-flow-node(n,c) ||
   ->e-node])

Production(counter=150, name=ns-flow-pair, args=[n, c], expression=[->c-mapping-key + ->s-separate(n,c) + ->ns-flow-map-explicit-entry(n,c) ||
   ->ns-flow-pair-entry(n,c)])

Production(counter=151, name=ns-flow-pair-entry, args=[n, c], expression=[->ns-flow-pair-yaml-key-entry(n,c) ||
   ->c-ns-flow-map-empty-key-entry(n,c) ||
   ->c-ns-flow-pair-json-key-entry(n,c)])

Production(counter=152, name=ns-flow-pair-yaml-key-entry, args=[n, c], expression=->ns-s-implicit-yaml-key(c) + ->c-ns-flow-map-separate-value(n,c))

Production(counter=153, name=c-ns-flow-pair-json-key-entry, args=[n, c], expression=->c-s-implicit-json-key(c) + ->c-ns-flow-map-adjacent-value(n,c))

Production(counter=154, name=ns-s-implicit-yaml-key, args=[c], expression=->ns-flow-yaml-node(n,c) + (->s-separate-in-line × ?))

Production(counter=155, name=c-s-implicit-json-key, args=[c], expression=->c-flow-json-node(n,c) + (->s-separate-in-line × ?))

Production(counter=156, name=ns-flow-yaml-content, args=[n, c], expression=->ns-plain(n,c))

Production(counter=157, name=c-flow-json-content, args=[n, c], expression=[->c-flow-sequence(n,c) ||
   ->c-flow-mapping(n,c) ||
   ->c-single-quoted(n,c) ||
   ->c-double-quoted(n,c)])

Production(counter=158, name=ns-flow-content, args=[n, c], expression=[->ns-flow-yaml-content(n,c) ||
   ->c-flow-json-content(n,c)])

Production(counter=159, name=ns-flow-yaml-node, args=[n, c], expression=[->c-ns-alias-node ||
   ->ns-flow-yaml-content(n,c) ||
   ->c-ns-properties(n,c) + [->s-separate(n,c) + ->ns-flow-yaml-content(n,c) ||
   ->e-scalar]])

Production(counter=160, name=c-flow-json-node, args=[n, c], expression=(->c-ns-properties(n,c) + ->s-separate(n,c) × ?) + ->c-flow-json-content(n,c))

Production(counter=161, name=ns-flow-node, args=[n, c], expression=[->c-ns-alias-node ||
   ->ns-flow-content(n,c) ||
   ->c-ns-properties(n,c) + [->s-separate(n,c) + ->ns-flow-content(n,c) ||
   ->e-scalar]])

Production(counter=162, name=c-b-block-header, args=[m, t], expression=[->c-indentation-indicator(m) + ->c-chomping-indicator(t) ||
   ->c-chomping-indicator(t) + ->c-indentation-indicator(m)] + ->s-b-comment)

Production(counter=163, name=c-indentation-indicator, args=[m], expression=->ns-dec-digit ⇒ <m =->ns-dec-digit - #x30>
  <> ⇒ <m = auto-detect()>)

Production(counter=164, name=c-chomping-indicator, args=[t], expression=<[-][HYPHEN-MINUS][0x2d]> ⇒ <t = strip>
  <<[+][PLUS SIGN][0x2b]>> ⇒ <t = keep>
  <> ⇒ <t = clip>)

Production(counter=165, name=b-chomped-last, args=[t], expression=<t = strip> ⇒ <->b-non-content | /* End of file */>
  <t = clip> ⇒ <->b-as-line-feed | /* End of file */>
  <t = keep> ⇒ <->b-as-line-feed | /* End of file */>)

Production(counter=166, name=l-chomped-empty, args=[n, t], expression=<t = strip> ⇒ <->l-strip-empty(n)>
  <t = clip> ⇒ <->l-strip-empty(n)>
  <t = keep> ⇒ <->l-keep-empty(n)>)

Production(counter=167, name=l-strip-empty, args=[n], expression=(->s-indent(n) + ->b-non-content × *) + (->l-trail-comments(n) × ?))

Production(counter=168, name=l-keep-empty, args=[n], expression=(->l-empty(n,c) × *) + (->l-trail-comments(n) × ?))

Production(counter=169, name=l-trail-comments, args=[n], expression=->s-indent(n) + ->c-nb-comment-text + ->b-comment + (->l-comment × *))

Production(counter=170, name=c-l+literal, args=[n], expression=->c-literal + ->c-b-block-header(m,t) + ->l-literal-content(n,t))

Production(counter=171, name=l-nb-literal-text, args=[n], expression=(->l-empty(n,c) × *) + ->s-indent(n) + (->nb-char × +))

Production(counter=172, name=b-nb-literal-next, args=[n], expression=->b-as-line-feed + ->l-nb-literal-text(n))

Production(counter=173, name=l-literal-content, args=[n, t], expression=(->l-nb-literal-text(n) + (->b-nb-literal-next(n) × *) + ->b-chomped-last(t) × ?) + ->l-chomped-empty(n,t))

Production(counter=174, name=c-l+folded, args=[n], expression=->c-folded + ->c-b-block-header(m,t) + ->l-folded-content(n,t))

Production(counter=175, name=s-nb-folded-text, args=[n], expression=->s-indent(n) + ->ns-char + (->nb-char × *))

Production(counter=176, name=l-nb-folded-lines, args=[n], expression=->s-nb-folded-text(n) + (->b-l-folded(n,c) + ->s-nb-folded-text(n) × *))

Production(counter=177, name=s-nb-spaced-text, args=[n], expression=->s-indent(n) + ->s-white + (->nb-char × *))

Production(counter=178, name=b-l-spaced, args=[n], expression=->b-as-line-feed + (->l-empty(n,c) × *))

Production(counter=179, name=l-nb-spaced-lines, args=[n], expression=->s-nb-spaced-text(n) + (->b-l-spaced(n) + ->s-nb-spaced-text(n) × *))

Production(counter=180, name=l-nb-same-lines, args=[n], expression=(->l-empty(n,c) × *) + [->l-nb-folded-lines(n) ||
   ->l-nb-spaced-lines(n)])

Production(counter=181, name=l-nb-diff-lines, args=[n], expression=->l-nb-same-lines(n) + (->b-as-line-feed + ->l-nb-same-lines(n) × *))

Production(counter=182, name=l-folded-content, args=[n, t], expression=(->l-nb-diff-lines(n) + ->b-chomped-last(t) × ?) + ->l-chomped-empty(n,t))

Production(counter=183, name=l+block-sequence, args=[n], expression=(->s-indent(n) + ->c-l-block-seq-entry(n) × +))

Production(counter=184, name=c-l-block-seq-entry, args=[n], expression=->c-sequence-entry + ->s-l+block-indented(n,c))

Production(counter=185, name=s-l+block-indented, args=[n, c], expression=[->s-indent(n) + [->ns-l-compact-sequence(n) ||
   ->ns-l-compact-mapping(n)] ||
   ->s-l+block-node(n,c) ||
   ->e-node + ->s-l-comments])

Production(counter=186, name=ns-l-compact-sequence, args=[n], expression=->c-l-block-seq-entry(n) + (->s-indent(n) + ->c-l-block-seq-entry(n) × *))

Production(counter=187, name=l+block-mapping, args=[n], expression=(->s-indent(n) + ->ns-l-block-map-entry(n) × +))

Production(counter=188, name=ns-l-block-map-entry, args=[n], expression=[->c-l-block-map-explicit-entry(n) ||
   ->ns-l-block-map-implicit-entry(n)])

Production(counter=189, name=c-l-block-map-explicit-entry, args=[n], expression=->c-l-block-map-explicit-key(n) + [->l-block-map-explicit-value(n) ||
   ->e-node])

Production(counter=190, name=c-l-block-map-explicit-key, args=[n], expression=->c-mapping-key + ->s-l+block-indented(n,c))

Production(counter=191, name=l-block-map-explicit-value, args=[n], expression=->s-indent(n) + ->c-mapping-value + ->s-l+block-indented(n,c))

Production(counter=192, name=ns-l-block-map-implicit-entry, args=[n], expression=[->ns-s-block-map-implicit-key ||
   ->e-node] + ->c-l-block-map-implicit-value(n))

Production(counter=193, name=ns-s-block-map-implicit-key, args=[], expression=[->c-s-implicit-json-key(c) ||
   ->ns-s-implicit-yaml-key(c)])

Production(counter=194, name=c-l-block-map-implicit-value, args=[n], expression=->c-mapping-value + [->s-l+block-node(n,c) ||
   ->e-node + ->s-l-comments])

Production(counter=195, name=ns-l-compact-mapping, args=[n], expression=->ns-l-block-map-entry(n) + (->s-indent(n) + ->ns-l-block-map-entry(n) × *))

Production(counter=196, name=s-l+block-node, args=[n, c], expression=[->s-l+block-in-block(n,c) ||
   ->s-l+flow-in-block(n)])

Production(counter=197, name=s-l+flow-in-block, args=[n], expression=->s-separate(n,c) + ->ns-flow-node(n,c) + ->s-l-comments)

Production(counter=198, name=s-l+block-in-block, args=[n, c], expression=[->s-l+block-scalar(n,c) ||
   ->s-l+block-collection(n,c)])

Production(counter=199, name=s-l+block-scalar, args=[n, c], expression=->s-separate(n,c) + (->c-ns-properties(n,c) + ->s-separate(n,c) × ?) + [->c-l+literal(n) ||
   ->c-l+folded(n)])

Production(counter=200, name=s-l+block-collection, args=[n, c], expression=(->s-separate(n,c) + ->c-ns-properties(n,c) × ?) + ->s-l-comments + ->l+block-sequence(n) + ->seq-spaces(n,c) + [->l+block-sequence(n) ||
   ->l+block-mapping(n)])

Production(counter=201, name=seq-spaces, args=[n, c], expression=<c = block-out> ⇒ <n-1>
  <c = block-in> ⇒ <n>)

Production(counter=202, name=l-document-prefix, args=[], expression=(->c-byte-order-mark × ?) + (->l-comment × *))

Production(counter=203, name=c-directives-end, args=[], expression=<[-][HYPHEN-MINUS][0x2d]> + <[-][HYPHEN-MINUS][0x2d]> + <[-][HYPHEN-MINUS][0x2d]>)

Production(counter=204, name=c-document-end, args=[], expression=<[.][FULL STOP][0x2e]> + <[.][FULL STOP][0x2e]> + <[.][FULL STOP][0x2e]>)

Production(counter=205, name=l-document-suffix, args=[], expression=->c-document-end + ->s-l-comments)

Production(counter=206, name=c-forbidden, args=[], expression=[->c-directives-end ||
   ->c-document-end] + [->b-char ||
   ->s-white])

Production(counter=207, name=l-bare-document, args=[], expression=->s-l+block-node(n,c))

Production(counter=208, name=l-explicit-document, args=[], expression=->c-directives-end + [->l-bare-document ||
   ->e-node + ->s-l-comments])

Production(counter=209, name=l-directive-document, args=[], expression=(->l-directive × +) + ->l-explicit-document)

Production(counter=210, name=l-any-document, args=[], expression=[->l-directive-document ||
   ->l-explicit-document ||
   ->l-bare-document])

Production(counter=211, name=l-yaml-stream, args=[], expression=(->l-document-prefix × *) + (->l-any-document × ?) + ((->l-document-suffix × +) + (->l-document-prefix × *) + [(->l-any-document × ?) ||
   (->l-document-prefix × *) + (->l-explicit-document × ?)] × *))

